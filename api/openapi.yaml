openapi: 3.0.3

info:
  title: UI gateway service
  description: An intermediary component between Glaciation Frontend and Metadata Service. The service adapts user interface queries into a series of SPARQL requests to MetadataService and telemetry requests from Storage Service. The service also checking user permissions via oauth server and filters the KGs that a user is not allowed to access.
  contact:
    name: HIRO-MicroDataCenters
    email: all-hiro@hiro-microdatacenters.nl
  license:
    name: MIT
    url: https://github.com/glaciation-heu/ui_gateway/blob/main/LICENSE
  version: 0.1.0

servers:
  - url: "http://localhost:8000"
    description: Local development server

security: 
  - OAuth2:
    - engineer
    - operator

paths:
  /oauth2/configuration:
    get:
      tags:
        - Auth
      security: []
      operationId: get_oauth2_configuration
      summary: Get OAuth2 settings
      description: This endpoint returns configuration data to form a link to the OAuth2 authentication page.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  oauth2_server_url:
                    type: string
                    description: OAuth2 server URL
                  client_id:
                    type: string
                    description: OAuth2 Client ID
                example:
                  oauth2_server_url: https://auth.example.com/oauth2/authorize
                  client_id: 2YotnFZFEjr1zCsicMWpAA

  /oauth2/authentication:
    post:
      tags:
        - Auth
      security: []
      operationId: oauth2_authentication
      summary: Exchange temporary token for access token
      description: This endpoint is used to exchange a temporary token for an OAuth2 access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                temporary_token:
                  type: string
                  description: Temporary token
              example:
                temporary_token: 2YotnFZFEjr1zCsicMWpAA
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: OAuth2 access token
                  token_type:
                    type: string
                    description: Token type
                  expires_in:
                    type: integer
                    description: Token validity period in seconds
                example:
                  access_token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvYnMgRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.uBVTVyop01rTZaUuwvuL35P3zjggzqJEq5pv6-gtKXE
                  token_type: Bearer
                  expires_in: 3600

        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '401':
          description: Unauthorized request

  /ws/notifications:
    get:
      tags:
        - WebSocket
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: websocket_notifications
      summary: Notifications
      description: Establishes a WebSocket connection for notifications
      responses:
        '101':
          description: Switching protocols
          headers:
            Upgrade:
              schema:
                type: string
                enum:
                  - websocket
              description: A server supports WebSocket connection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'

  /ws/updates:
    get:
      tags:
        - WebSocket
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: websocket_updates
      summary: Updates
      description: Establishes a WebSocket connection for updates
      responses:
        '101':
          description: Switching protocols
          headers:
            Upgrade:
              schema:
                type: string
                enum:
                  - websocket
              description: A server supports WebSocket connection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Update'

  /profile:
    get:
      tags:
        - Profile
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_profile
      summary: Current user information
      description: This endpoint returns information about the current user.
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /search:
    get:
      tags:
        - Search
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: search
      summary: Global search
      description: Global search across all objects of all types.
      parameters:
        - name: query
          in: query
          description: Search query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/SearchResult'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

  /queries:
    get:
      tags:
        - Query
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_queries_list
      summary: Get user`s queries list
      description: Returns a list of queries with the ability to paginate and search.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SearchParam'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/QueryInList'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

    post:
      tags:
        - Query
      security:
        - OAuth2: [engineer]
      operationId: create_query
      summary: Create a user`s query
      description: Creates a new user`s query to display custom data on the dashboard.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                name:
                  type: string
                query:
                  type: string
                  description: SPARQL query.
      responses:
        '201':
          description: Query created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the created query.
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'

  /queries/{id}:
    get:
      tags:
        - Query
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_query_detail
      summary: Get a user`s query detail
      description: Returns a user`s query data.
      parameters:
        - name: id
          in: path
          description: Query ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Query'

    delete:
      tags:
        - Query
      security:
        - OAuth2: [engineer, operator]
      operationId: delete_query
      summary: Delete a user`s query
      description: Deletes a user`s query by its identifier.
      parameters:
        - name: id
          in: path
          description: Query ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful removal

  /query-results/{id}:
    get:
      tags:
        - Query
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_query_result_list
      summary: Get result of user`s query
      description: Returns a result of user`s query with the ability to paginate.
      parameters:
        - name: id
          in: path
          description: Query ID
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/QueryResult'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

  /glaciation-nodes:
    get:
      tags:
        - GlaciationNode
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_glaciation_nodes_list
      summary: Get a list of glaciation nodes
      description: Returns a list of nodes with the ability to paginate, search and filter.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - name: status
          in: query
          description: String for filtering by status
          required: false
          schema:
            type: string
        - name: countryCode
          in: query
          description: String for filtering by country code
          required: false
          schema:
            type: string
        - name: tag
          in: query
          description: String for filtering by tag
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/GlaciationNodeInList'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

  /glaciation-nodes/{id}:
    get:
      tags:
        - GlaciationNode
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_glaciation_node_detail
      summary: Get glaciation node data
      description: Returns data from a specific glaciation node.
      parameters:
        - name: id
          in: path
          description: Glaciation node ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlaciationNode'

  /kubernetes-nodes:
    get:
      tags:
        - KubernetesNode
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_kubernetes_nodes_list
      summary: Get a list of kubernetes nodes
      description: Returns a list of nodes with the ability to paginate, search and filter.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - name: glaciationNode
          in: query
          description: String for filtering by Glaciation Node
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: String for filtering by type
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: String for filtering by status
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/KubernetesNodeInList'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

  /kubernetes-nodes/{id}:
    get:
      tags:
        - KubernetesNode
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_kubernetes_node_detail
      summary: Get kubernetes node data
      description: Returns data from a specific kubernetes node.
      parameters:
        - name: id
          in: path
          description: Kubernetes node ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KubernetesNode'

  /workloads:
    get:
      tags:
        - Workload
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_workload_list
      summary: Get a list of workloads
      description: Returns a list of workloads with the ability to paginate, search and filter.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - name: glaciationNode
          in: query
          description: String for filtering by Glaciation Node
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: String for filtering by status
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkloadInList'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

  /workloads/{id}:
    get:
      tags:
        - Workload
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_workload_detail
      summary: Get workload data
      description: Returns data from a specific workload.
      parameters:
        - name: id
          in: path
          description: Workload ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'

    delete:
      tags:
        - Workload
      security:
        - OAuth2: [engineer, operator]
      operationId: delete_workload
      summary: Delete a workload
      description: Deletes a workload by its identifier.
      parameters:
        - name: id
          in: path
          description: Workload ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful removal

  /networks:
    get:
      tags:
        - Network
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_networks_list
      summary: Get a list of networks
      description: Returns a list of network with the ability to paginate, search and filter.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - name: glaciationNode
          in: query
          description: String for filtering by Glaciation Node
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/NetworkInList'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

  /networks/{id}:
    get:
      tags:
        - Network
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_network_detail
      summary: Get network data
      description: Returns data from a specific network.
      parameters:
        - name: id
          in: path
          description: Network ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'

  /datasets:
    get:
      tags:
        - Dataset
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_datasets_list
      summary: Get a list of datasets
      description: Returns a list of datasets with the ability to paginate, search and filter.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - name: glaciationNode
          in: query
          description: String for filtering by Glaciation Node
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/DatasetInList'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

  /datasets/{id}:
    get:
      tags:
        - Dataset
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_dataset_detail
      summary: Get dataset data
      description: Returns data from a specific dataset.
      parameters:
        - name: id
          in: path
          description: dataset ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'

    delete:
      tags:
        - Dataset
      security:
        - OAuth2: [engineer, operator]
      operationId: delete_dataset
      summary: Delete a dataset
      description: Deletes a dataset by its identifier.
      parameters:
        - name: id
          in: path
          description: dataset ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful removal

  /logs:
    get:
      tags:
        - Logs
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_logs_list
      summary: Get a list of logs
      description: Returns a list of logs with the ability to paginate, search and filter.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/ObjectTypeParam'
        - $ref: '#/components/parameters/ObjectIDParam'
        - $ref: '#/components/parameters/StartParam'
        - $ref: '#/components/parameters/EndParam'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/LogsItemInList'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

  /telemetry:
    get:
      tags:
        - Telemetry
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_telemetry
      summary: Get telemetry
      description: Returns telemetry with the ability to paginate and filter. If the datetime_start and datetime_end parameters are not specified, the last value will be returned.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/ObjectTypeParam'
        - $ref: '#/components/parameters/ObjectIDParam'
        - $ref: '#/components/parameters/MetricParam'
        - $ref: '#/components/parameters/StartParam'
        - $ref: '#/components/parameters/EndParam'
        - $ref: '#/components/parameters/StepParam'

      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ObjectTelemetry'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

  /telemetry-prediction:
    get:
      tags:
        - Telemetry
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_telemetry_prediction
      summary: Get telemetry prediction
      description: Returns telemetry prediction with the ability to paginate and filter. If the datetime_start and datetime_end parameters are not specified, the last value will be returned.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/ObjectTypeParam'
        - $ref: '#/components/parameters/ObjectIDParam'
        - $ref: '#/components/parameters/MetricParam'
        - $ref: '#/components/parameters/StartParam'
        - $ref: '#/components/parameters/EndParam'
        - $ref: '#/components/parameters/StepParam'

      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ObjectTelemetry'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

  /graph:
    get:
      tags:
        - Graph
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_graph_nodes_list
      summary: Get a list of graph nodes
      description: Returns a list of graph nodes with the ability to paginate, search and filter.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SearchParam'
        - $ref: '#/components/parameters/ObjectTypeParam'
        - name: predecessorID
          in: query
          required: false
          schema:
            type: string
            example: 94bc5906-b08e-4952-86ee-0f0bbad79000
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                required:
                  - versions
                  - items
                  - page
                  - size
                properties:
                  versions:
                    $ref: '#/components/schemas/GraphVersions'
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        nodes:
                          type: array
                          items:
                            $ref: '#/components/schemas/GraphNode'
                        edges:
                          type: array
                          items:
                            $ref: '#/components/schemas/GraphEdge'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

  /graph-node-versions/{id}:
    get:
      tags:
        - Graph
      security:
        - OAuth2:
          - engineer
          - operator
      operationId: get_graph_node_versions_list
      summary: Get a list of graph node versions
      description: Returns a list of graph node versions with the ability to paginate and search.
      parameters:
        - name: id
          in: path
          description: Graph node ID
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - page
                  - size
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/GraphVersion'
                  page:
                    $ref: '#/components/schemas/Page'
                  size:
                    $ref: '#/components/schemas/PageSize'

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: This API uses OAuth 2 with the authorizationCode grant flow.
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/oauth2/authorize
          tokenUrl: https://auth.example.com/oauth2/token
          refreshUrl: https://auth.example.com/oauth2/refresh-token
          scopes:
            engineer: Grants access to Workload Engineer operations
            operator: Grants access to Glaciation Operator operations

  parameters:
    PageParam:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1

    SizeParam:
      name: size
      in: query
      description: Number of items per page.
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 100

    SearchParam:
      name: search
      in: query
      description: String for searching by items
      required: false
      schema:
        type: string

    ObjectTypeParam:
      name: objectType
      in: query
      required: false
      schema:
        type: string
        enum:
          - GlaciationNode
          - KubernetesNode
          - Workload
          - Network
          - Dataset
          - Telemetry
    
    ObjectIDParam:
      name: objectId
      in: query
      required: false
      schema:
        type: string

    MetricParam:
      name: metric
      in: query
      required: true
      schema:
        type: string
        enum:
          - CPU
          - memory
          - storage
          - energy
          - latency
        example: CPU

    StartParam:
      name: datetime_start
      in: query
      required: false
      schema:
        type: string
        format: date-time
        example: "2024-03-08T04:00:00.000Z"

    EndParam:
      name: datetime_end
      in: query
      required: false
      schema:
        type: string
        format: date-time
        example: "2024-03-08T04:00:00.000Z"

    StepParam:
      name: step
      in: query
      required: false
      schema:
        type: string
        enum:
          - "1second"
          - "10second"
          - "30second"
          - "1minute"
          - "10minute"
          - "30minute"
          - "1hour"
          - "3hour"
          - "6hour"
          - "12hour"
          - "1day"
          - "2day"
          - "5day"
          - "10day"
          - "15day"
          - "1month"
          - "2month"
          - "3month"
          - "4month"
          - "6month"
          - "1year"
          - "1step"  # aggregate
        example: "2024-03-08T04:00:00.000Z"

  schemas:
    HTTPValidationError:
      type: object
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail

    ValidationError:
      type: object
      required:
      - loc
      - msg
      - type
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type

    ObjectType:
      type: string
      enum:
        - GlaciationNode
        - KubernetesNode
        - Workload
        - Network
        - Dataset
        - Telemetry
      example: GlaciationNode

    Notification:
      type: object
      required:
      - id
      - from
      - to
      - created
      - title
      - message
      properties:
        id:
          type: string
          description: Notification ID
          example: 1
        from:
          type: string
          description: Sender
          example: system
        to:
          type: string
          description: Recipient
          example: Alice
        created:
          type: string
          format: date-time
          description: Creation date and time
          example: "2024-03-08T04:00:00.000Z"
        title:
          type: string
          description: Notification title
          example: Running out of disk space
        message:
          type: string
          description: Notification text
          example: Node "1" is running out of disk space. Only 512MB left.

    Update:
      type: object
      required:
        - action
        - objectType
        - objectData
      properties:
        action:
          type: string
          enum:
            - create
            - update
            - delete
        objectType:
          $ref: '#/components/schemas/ObjectType'
        objectData:
          oneOf:
            - $ref: '#/components/schemas/GlaciationNode'
            - $ref: '#/components/schemas/KubernetesNode'
            - $ref: '#/components/schemas/Workload'
            - $ref: '#/components/schemas/Network'
            - $ref: '#/components/schemas/Dataset'
            - $ref: '#/components/schemas/ObjectTelemetry'

    User:
      type: object
      required:
      - id
      - username
      properties:
        id:
          type: string
          description: ID
        username:
          type: string
          description: Username
      example:
        id: 123
        username: Alice

    Location:
      type: object
      required:
        - country
      properties:
        country:
          type: object
          required:
            - code
            - name
          properties:
            code:
              type: string
            name:
              type: string
        city:
          type: string
        address:
          type: string
        coordinates:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
      example:
        country:
          code: NL
          name: Netherlands
        city: Amsterdam
        address: Nieuwezijds Voorburgwal 147, 1012 RJ
        coordinates:
          latitude: 52.37356701967899
          longitude: 4.89145232467164

    Page:
      type: number
      minimum: 1

    PageSize:
      type: number
      minimum: 1
      maximum: 100
      default: 100
    
    GraphVersion:
      type: object
      required:
        - version
        - timestamp
      properties:
        version:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        timestamp:
          type: string
          format: date-time
          example: "2024-03-08T04:00:00.000Z"

    GraphVersions:
      type: object
      required:
        - current
        - prev
        - next
      properties:
        current:
          $ref: '#/components/schemas/GraphVersion'
        prev:
          allOf:
          - $ref: '#/components/schemas/GraphVersion'
          - type: object
            nullable: true
          example:
            version: 56345906-b018-df52-8600-110b78dh8012
            timestamp: "2024-03-07T04:00:00.000Z"
        next:
          allOf:
          - $ref: '#/components/schemas/GraphVersion'
          - type: object
            nullable: true
          example: null

    GraphNode:
      type: object
      required:
        - id
        - payload
      properties:
        id:
          type: string
          example: ks985906-b08e-4952-86ee-0f0bbad09jak
        payload:
          type: object
          required:
            - objectType
            - objectData
          properties:
            objectType:
              $ref: '#/components/schemas/ObjectType'
            objectData:
              oneOf:
                - $ref: '#/components/schemas/GlaciationNodeShort'
                - $ref: '#/components/schemas/KubernetesNodeShort'
                - $ref: '#/components/schemas/WorkloadShort'
                - $ref: '#/components/schemas/NetworkShort'
                - $ref: '#/components/schemas/DatasetShort'
                - $ref: '#/components/schemas/ObjectTelemetry'

    GraphEdge:
      type: object
      required:
        - source
        - target
        - payload
      properties:
        source:
          type: string
          nullable: true
          example: "ks985906-b08e-4952-86ee-0f0bbad09jak"
        target:
          type: string
          nullable: true
          example: "ks985906-b08e-4952-86ee-0f0bbad09snh"
        payload:
          type: object
          required:
            - type
          properties:
            predicate:
              type: string

    NodeStatus:
      type: string
      enum:
        - up
        - down
      example:
        up

    Tag:
      type: object
      required:
        - text
      properties:
        text:
          type: string
      example:
        text: Tag1

    NetworkInList:
      type: object
      required:
        - id
        - name
        - hostname
        - internalIP
        - telemetry
      properties:
        id:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        name:
          type: string
          example: Network1
        hostname:
          type: string
          example: internal.domain.com
        internalIP:
          type: string
          format: IPv4
          example: 127.0.0.1
        telemetry:
          type: array
          items:
            $ref: '#/components/schemas/Metric'

    Network:
      $ref: '#/components/schemas/NetworkInList'

    NetworkShort:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        name:
          type: string
          example: Network1

    GlaciationNodeInList:
      type: object
      required:
        - id
        - name
        - location
        - status
        - telemetry
        - nodesCount
        - tags
      properties:
        id:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        name:
          type: string
          example: GlaciationNode1
        location:
          $ref: '#/components/schemas/Location'
        status:
          $ref: '#/components/schemas/NodeStatus'
        telemetry:
          type: array
          items:
            $ref: '#/components/schemas/Metric'
        nodesCount:
          type: number
          example: 4
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    GlaciationNode:
      allOf:
        - $ref: '#/components/schemas/GlaciationNodeInList'
        - type: object
          required:
            - networks
          properties:
            networks:
              type: array
              items:
                $ref: '#/components/schemas/NetworkShort'


    GlaciationNodeShort:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        name:
          type: string
          example: GlaciationNode1

    KubernetesNodeInList:
      type: object
      required:
        - id
        - name
        - glaciationNode
        - status
        - telemetry
        - type
      properties:
        id:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        name:
          type: string
          example: Node1
        glaciationNode:
          $ref: '#/components/schemas/GlaciationNodeShort'
        status:
          $ref: '#/components/schemas/NodeStatus'
        telemetry:
          type: array
          items:
            $ref: '#/components/schemas/Metric'
        type:
          type: string
          enum:
            - master
            - worker
          example: master

    KubernetesNode:
      allOf:
        - $ref: '#/components/schemas/KubernetesNodeInList'
        - type: object
          required:
            - networks
          properties:
            networks:
              type: array
              items:
                $ref: '#/components/schemas/NetworkShort'

    KubernetesNodeShort:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        name:
          type: string
          example: Node1

    WorkloadInList:
      type: object
      required:
        - id
        - name
        - glaciationNodes
        - description
        - created
        - status
        - telemetry
        - datasets
        - tags
      properties:
        id:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        name:
          type: string
          example: Workload1
        glaciationNodes:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/GlaciationNodeShort'
              - type: object
                required:
                  - kubernetesNodes
                properties:
                  kubernetesNodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/KubernetesNodeShort'
        description:
          type: string
          example: Description
        created:
          type: string
          format: date-time
          example: "2024-03-08T04:00:00.000Z"
        status:
          type: string
          enum:
            - Running
            - Stopped
          example: Running
        telemetry:
          type: array
          items:
            $ref: '#/components/schemas/Metric'
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/DatasetShort'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    Workload:
      $ref: '#/components/schemas/WorkloadInList'

    WorkloadShort:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        name:
          type: string
          example: Workload1

    DatasetInList:
      type: object
      required:
        - id
        - name
        - description
        - size
        - format
        - source
        - glaciationNode
        - workloads
        - telemetry
        - tags
      properties:
        id:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        name:
          type: string
          example: Dataset1
        description:
          type: string
          example: Description
        size:
          type: number
          example: 40
        format:
          type: string
        source:
          type: string
        glaciationNode:
          $ref: '#/components/schemas/GlaciationNodeShort'
        workloads:
          type: array
          items:
            $ref: '#/components/schemas/WorkloadShort'
        telemetry:
          type: array
          items:
            $ref: '#/components/schemas/Metric'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'

    Dataset:
      $ref: '#/components/schemas/DatasetInList'
    
    DatasetShort:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        name:
          type: string
          example: Dataset1

    LogsItemInList:
      type: object
      required:
        - id
        - created
        - level
        - text
        - objectType
        - objectID
      properties:
        id:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        created:
          type: string
          format: date-time
          example: "2024-03-08T04:00:00.000Z"
        level:
          type: string
          enum:
            - DEBUG
            - INFO
            - WARNING
            - ERROR
            - CRITICAL
          example: ERROR
        text:
          type: string
          example: Text of error.
        objectType:
          $ref: '#/components/schemas/ObjectType'
        objectID:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000

    LogsItem:
      $ref: '#/components/schemas/LogsItemInList'

    Metric:
      type: object
      required:
        - parameter
        - value
        - uom
      properties:
        parameter:
          type: string
          enum:
            - CPU utilization
            - memory utilization
            - disk usage
            - energy consumption
            - latency
          example: CPU utilization
        value:
          type: number
          example: 10
        uom:
          type: string
          enum:
            - percent
            - bytes
            - seconds
            - millisecond
            - number
          example: percent
    
    Telemetry:
      type: object
      required:
        - timestamp
        - metric
        - links
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2024-03-08T04:00:00.000Z"
        metric:
          $ref: '#/components/schemas/Metric'
        links:
          type: array
          items:
            $ref: '#/components/schemas/ExternalServiceLink'
    
    ObjectTelemetry:
      allOf:
        - $ref: '#/components/schemas/Telemetry'
        - type: object
          required:
            - objectType
            - objectID
          properties:
            objectType:
              type: string
              example: KubernetesNode
            objectID:
              type: string
              example: 94bc5906-b08e-4952-86ee-0f0bbad79000

    SearchResult:
      type: object
      required:
        - objectType
        - objectID
        - title
        - description
      properties:
        objectType:
          $ref: '#/components/schemas/ObjectType'
        objectID:
          type: string
          example: 94bc5906-b08e-4952-86ee-0f0bbad79000
        title:
          type: string
          example: Node1
        description:
          type: string
          description: Description of the object indicating the location of the match.
          example: GlaciationNode1

    QueryInList:
      type: object
      required:
        - name
        - query
      properties:
        name:
          type: string
          example: Query1
        query:
          type: string
          example:
            SELECT ?subject ?predicate ?object
            WHERE {
              ?subject ?predicate ?object
            }

    Query:
      $ref: '#/components/schemas/QueryInList'

    QueryResult:
      type: object  # TODO: Define query result

    ExternalServiceLink:
      type: object
      required:
        - service
        - link
        - credentials
      properties:
        service:
          type: string
          enum:
            - prometheus
        link:
          type: string
          format: uri
          example: http://prometheus.demo.com
        credentials:
          type: object
          example:
            token: 12345
